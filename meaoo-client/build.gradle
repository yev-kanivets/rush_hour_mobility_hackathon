apply plugin: 'kotlin'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'jacoco'
apply plugin: 'org.jetbrains.dokka'

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    test.java.srcDirs += 'src/test/kotlin'
    test.resources.srcDirs = ['src/test/resources']
}

test {
    systemProperty 'testMode', System.getProperty("testMode") ?: 'local'
    //include '**/TestSuite.class'
    outputs.upToDateWhen { false }
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}

sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

dependencies {
    implementation "com.github.kittinunf.fuel:fuel-gson:$fuelGsonVersion"
    implementation "com.squareup.okhttp3:okhttp:3.10.0"

    testCompile "junit:junit:$junitVersion"
    testCompile "com.squareup.okhttp3:mockwebserver:$mockWebserverVersion"
    testCompile "org.skyscreamer:jsonassert:$jsonAssertVersion"
}

jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    afterEvaluate {
        classDirectories = fileTree(dir: "${buildDir}/classes/kotlin/main", excludes: ['**/model/**', '**/**$inlined$**'])
    }
}

jacoco {
    toolVersion = '0.7.1.201405082137'

}

group = 'fr.bmartel'
version = projectVersion

def libName = 'meaoo-client'

bintray {
    user = "$System.env.BINTRAY_USER"
    key = "$System.env.BINTRAY_KEY"

    configurations = ['archives']

    dryRun = false //Whether to run this as dry-run, without deploying
    publish = true //If version should be auto published after an upload

    pkg {
        repo = 'maven'
        name = libName
        desc = projectDescription
        websiteUrl = projectSite
        issueTrackerUrl = projectIssueTracker
        vcsUrl = projectRepo
        licenses = projectLicenses
        labels = projectLabels
        publicDownloadNumbers = true

        version {
            name = projectVersion //Bintray logical version name
            vcsTag = projectVersion

            gpg {
                sign = true
                passphrase = "$System.env.GPG_PASSPHRASE"
            }

            mavenCentralSync {
                sync = true
                //Optional (true by default). Determines whether to sync the version to Maven Central.
                user = "$System.env.MAVEN_CENTRAL_USER_TOKEN" //OSS user token
                password = "$System.env.MAVEN_CENTRAL_PASSWORD" //OSS user password
                close = '1'
                //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                description projectDescription
                packaging 'jar'
                name libName
                url projectSite
                licenses {
                    license {
                        name projectLicense
                        url projectLicensePath
                    }
                }
                developers {
                    developer {
                        id 'bertrandmartel'
                        name 'Bertrand Martel'
                        email 'bmartel.fr@gmail.com'
                    }
                }
                scm {
                    connection projectRepo
                    developerConnection projectRepo
                    url projectSite
                }
            }
            whenConfigured {
                p ->
                    p.dependencies = p.dependencies.findAll {
                        dep -> (dep.artifactId.notIn(["junit", "mockwebserver", "jsonassert","rxbonjour-driver-jmdns","Java-WebSocket"]))
                    }
            }
        }
    }
}

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/dokkaJavadoc"
}

task packageJavadoc(type: Jar, dependsOn: 'dokkaJavadoc') {
    from "$buildDir/dokkaJavadoc"
    classifier = 'javadoc'
}

artifacts {
    archives packageJavadoc
    archives sourcesJar
}
